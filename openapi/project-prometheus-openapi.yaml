openapi: 3.0.3
info:
  title: Project Prometheus Fleet API
  description: |
    Project Prometheus 프론트엔드가 기대하는 백엔드 REST API 명세입니다.

    실제 백엔드(`VITE_API_BASE_URL`)는 표준 응답 래퍼(`status/data/error/timestamp`) 사용을 권장하지만,
    Plain JSON(리소스 객체/배열 직접 반환)도 허용합니다. 본 명세는 두 형태를 `oneOf`로 기술합니다.
  version: 1.1.0
  license:
    name: Proprietary
    url: https://prometheus.test/license
servers:
  - url: https://api.prometheus.test
    description: 실제 백엔드 API (환경 변수 `VITE_API_BASE_URL`로 설정)
  - url: http://localhost:5000/api
    description: 로컬 실백엔드 호환 서버
security: []
tags:
  - name: Assets
    description: 차량 자산(Asset) 관리
  - name: Rentals
    description: 렌탈 계약 관리
  - name: Vehicles
    description: 자산/렌탈 통합 차량 스냅샷
  - name: Dashboard
    description: 대시보드용 집계 데이터
  - name: Problem Vehicles
    description: 도난·연체 등 이슈 차량 목록
  - name: Geofences
    description: 지오펜스/회사 설정 연계 데이터
  - name: Company
    description: 회사 기본 정보 및 지오펜스 저장
  - name: Issues
    description: 문제 차량 신고
  - name: Members
    description: 회원 관리 (가입 승인/거절, 역할 변경)
  - name: Auth
    description: 인증 및 사용자 정보
paths:
  /assets:
    get:
      tags: [Assets]
      summary: 자산 목록 조회
      operationId: listAssets
      description: 차량 자산 전체 목록을 반환합니다.
      responses:
        "200":
          description: 자산 목록
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/Asset'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Asset'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags: [Assets]
      summary: 신규 자산 생성
      operationId: createAsset
      description: 신규 차량 자산을 등록합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetCreateInput'
      responses:
        "201":
          description: 생성된 자산
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            $ref: '#/components/schemas/Asset'
                  - $ref: '#/components/schemas/Asset'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /assets/{assetId}:
    parameters:
      - $ref: '#/components/parameters/AssetIdParam'
    get:
      tags: [Assets]
      summary: 자산 상세 조회
      operationId: getAsset
      responses:
        "200":
          description: 자산 상세 정보
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            $ref: '#/components/schemas/Asset'
                  - $ref: '#/components/schemas/Asset'
        "404":
          $ref: '#/components/responses/Error'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
    put:
      tags: [Assets]
      summary: 자산 정보 수정
      operationId: updateAsset
      description: 부분 업데이트(PUT 또는 PATCH)를 수행합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetUpdateInput'
      responses:
        "200":
          description: 수정된 자산 정보
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            $ref: '#/components/schemas/Asset'
                  - $ref: '#/components/schemas/Asset'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
    delete:
      tags: [Assets]
      summary: 자산 삭제
      operationId: deleteAsset
      responses:
        "204":
          description: 삭제 완료
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /rentals:
    get:
      tags: [Rentals]
      summary: 렌탈 계약 목록 조회
      operationId: listRentals
      responses:
        "200":
          description: 렌탈 계약 목록
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/Rental'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Rental'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags: [Rentals]
      summary: 신규 렌탈 계약 생성
      operationId: createRental
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentalCreateInput'
      responses:
        "201":
          description: 생성된 렌탈 계약
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            $ref: '#/components/schemas/Rental'
                  - $ref: '#/components/schemas/Rental'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /rentals/latest:
    get:
      tags: [Rentals]
      summary: VIN별 최신 렌탈 계약 조회
      operationId: listLatestRentals
      description: 각 VIN의 최신 렌탈 1건을 반환합니다.
      responses:
        "200":
          description: 최신 렌탈 목록
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/Rental'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Rental'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /rentals/{rentalId}:
    parameters:
      - $ref: '#/components/parameters/RentalIdParam'
    get:
      tags: [Rentals]
      summary: 렌탈 계약 상세 조회
      operationId: getRental
      responses:
        "200":
          description: 렌탈 계약 상세 정보
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            $ref: '#/components/schemas/Rental'
                  - $ref: '#/components/schemas/Rental'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
    put:
      tags: [Rentals]
      summary: 렌탈 계약 수정
      operationId: updateRental
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentalUpdateInput'
      responses:
        "200":
          description: 수정된 렌탈 계약
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            $ref: '#/components/schemas/Rental'
                  - $ref: '#/components/schemas/Rental'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
    delete:
      tags: [Rentals]
      summary: 렌탈 계약 삭제
      operationId: deleteRental
      responses:
        "204":
          description: 삭제 완료
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /rentals/byVin/{vin}:
    parameters:
      - $ref: '#/components/parameters/VinParam'
    get:
      tags: [Rentals]
      summary: 특정 VIN의 렌탈 상태 집계
      operationId: getRentalStatusByVin
      responses:
        "200":
          description: 렌탈 상태 집계 정보
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            $ref: '#/components/schemas/RentalStatusAggregate'
                  - $ref: '#/components/schemas/RentalStatusAggregate'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /vehicles:
    get:
      tags: [Vehicles]
      summary: 차량 스냅샷 목록 조회
      operationId: listVehicles
      description: 자산과 렌탈 정보를 결합한 차량 스냅샷 목록을 반환합니다.
      responses:
        "200":
          description: 차량 스냅샷 목록
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/VehicleSnapshot'
                  - type: array
                    items:
                      $ref: '#/components/schemas/VehicleSnapshot'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /dashboard:
    get:
      tags: [Dashboard]
      summary: 대시보드 데이터 조회
      operationId: getDashboard
      responses:
        "200":
          description: 대시보드 집계 정보
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            $ref: '#/components/schemas/DashboardSummary'
                  - $ref: '#/components/schemas/DashboardSummary'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /problem-vehicles:
    get:
      tags: [Problem Vehicles]
      summary: 문제 차량 목록 조회
      operationId: listProblemVehicles
      responses:
        "200":
          description: 이슈 차량 목록
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/ProblemVehicle'
                  - type: array
                    items:
                      $ref: '#/components/schemas/ProblemVehicle'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /geofences:
    get:
      tags: [Geofences]
      summary: 지오펜스 목록 조회
      operationId: listGeofences
      description: 설정된 지오펜스 좌표 목록을 반환합니다.
      responses:
        "200":
          description: 지오펜스 목록
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/Geofence'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Geofence'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags: [Geofences]
      summary: 지오펜스 생성
      operationId: createGeofence
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Geofence'
      responses:
        "201":
          description: 생성된 지오펜스
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            $ref: '#/components/schemas/Geofence'
                  - $ref: '#/components/schemas/Geofence'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'

  /geofences/{id}:
    parameters:
      - $ref: '#/components/parameters/GeofenceIdParam'
    put:
      tags: [Geofences]
      summary: 지오펜스 수정
      operationId: updateGeofence
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Geofence'
      responses:
        "200":
          description: 수정된 지오펜스 또는 성공 상태
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            $ref: '#/components/schemas/Geofence'
                  - $ref: '#/components/schemas/Geofence'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
    delete:
      tags: [Geofences]
      summary: 지오펜스 삭제
      operationId: deleteGeofence
      responses:
        "204":
          description: 삭제 완료
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /company:
    get:
      tags: [Company]
      summary: 회사 정보 조회
      operationId: getCompanyInfo
      responses:
        "200":
          description: 회사 기본 정보
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            $ref: '#/components/schemas/Company'
                  - $ref: '#/components/schemas/Company'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
    put:
      tags: [Company]
      summary: 회사 정보 저장
      operationId: updateCompanyInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
      responses:
        "200":
          description: 저장 성공 여부
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            type: object
                            properties:
                              ok:
                                type: boolean
                          status:
                            enum: [success]
                  - type: object
                    properties:
                      ok:
                        type: boolean
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /issues:
    post:
      tags: [Issues]
      summary: 문제 차량 이슈 등록 (실제 백엔드)
      operationId: createIssue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueCreateInput'
      responses:
        "201":
          description: 생성된 이슈 정보
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            $ref: '#/components/schemas/Issue'
                  - $ref: '#/components/schemas/Issue'
        "400":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'

  /auth/register:
    post:
      tags: [Auth]
      summary: 신규 사용자 등록
      operationId: registerUser
      description: |
        신규 사용자를 등록합니다. 기본 membershipStatus는 pending이며, 관리자 승인 후 로그인 가능합니다.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationInput'
      responses:
        "201":
          description: 등록 성공
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            $ref: '#/components/schemas/UserRegistrationResponse'
                  - $ref: '#/components/schemas/UserRegistrationResponse'
        "400":
          description: 필수값 누락
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: userId 중복
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          $ref: '#/components/responses/Error'

  /auth/login:
    post:
      tags: [Auth]
      summary: 사용자 로그인
      operationId: loginUser
      description: |
        사용자 로그인. membershipStatus가 pending 또는 rejected인 경우 403 에러 반환.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        "200":
          description: 로그인 성공
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            $ref: '#/components/schemas/LoginResponse'
                  - $ref: '#/components/schemas/LoginResponse'
        "401":
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: 승인 대기 또는 거절됨
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          error:
                            type: object
                            properties:
                              type:
                                type: string
                                enum: [APPROVAL_PENDING, APPROVAL_REJECTED]
                              message:
                                type: string
                  - type: object
                    properties:
                      status:
                        enum: [error]
                      error:
                        type: object
                        properties:
                          type:
                            type: string
                            enum: [APPROVAL_PENDING, APPROVAL_REJECTED]
                          message:
                            type: string
        default:
          $ref: '#/components/responses/Error'

  /auth/me:
    get:
      tags: [Auth]
      summary: 현재 사용자 정보 조회
      operationId: getCurrentUser
      responses:
        "200":
          description: 사용자 정보
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/User'
        "401":
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'

  /members/pending:
    get:
      tags: [Members]
      summary: 승인 대기중인 회원 목록 조회
      operationId: listPendingMembers
      description: |
        super_admin: 전체 대기 회원 조회
        admin: 자신의 회사(companyId) 대기 회원만 조회
      responses:
        "200":
          description: 대기 회원 목록
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/StandardResponse'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/User'
                  - type: array
                    items:
                      $ref: '#/components/schemas/User'
        "403":
          description: 권한 없음 (member 역할)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          $ref: '#/components/responses/Error'

  /members/approve:
    post:
      tags: [Members]
      summary: 회원 가입 승인
      operationId: approveMember
      description: |
        super_admin: 제한 없음
        admin: 같은 회사 사용자만 승인 가능
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberActionInput'
      responses:
        "200":
          description: 승인 성공
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      status:
                        enum: [success]
        "400":
          description: userId 누락
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: 타사 사용자 승인 불가
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: 존재하지 않는 사용자
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          $ref: '#/components/responses/Error'

  /members/reject:
    post:
      tags: [Members]
      summary: 회원 가입 거절
      operationId: rejectMember
      description: |
        super_admin: 제한 없음
        admin: 같은 회사 사용자만 거절 가능
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberRejectInput'
      responses:
        "200":
          description: 거절 성공
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      status:
                        enum: [success]
        "400":
          description: userId 누락
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: 타사 사용자 거절 불가
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: 존재하지 않는 사용자
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          $ref: '#/components/responses/Error'

  /members/{userId}/role:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
        description: 대상 사용자 ID (이메일)
    patch:
      tags: [Members]
      summary: 사용자 역할 변경
      operationId: changeMemberRole
      description: |
        super_admin: 모두 변경 가능 (super_admin 부여 가능)
        admin: 같은 회사 사용자만 변경 가능, super_admin 부여 불가

        역할 변경 시 대상 사용자의 tokenSalt가 회전되어 재로그인 필요
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleChangeInput'
      responses:
        "200":
          description: 역할 변경 성공
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      status:
                        enum: [success]
        "400":
          description: 허용되지 않는 role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: 권한 부족 또는 타사 대상
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: 대상 사용자 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          $ref: '#/components/responses/Error'

  components:
    parameters:
      AssetIdParam:
        name: assetId
        in: path
        required: true
        schema:
          type: string
        description: 자산 ID
      RentalIdParam:
        name: rentalId
        in: path
        required: true
        schema:
          type: string
        description: 렌탈 계약 ID
      VinParam:
        name: vin
        in: path
        required: true
        schema:
          type: string
          minLength: 17
          maxLength: 17
        description: 차량 VIN(17자리)
      GeofenceIdParam:
        name: id
        in: path
        required: true
        schema:
          type: string
        description: 지오펜스 식별자(백엔드 구현에 따라 name일 수 있음)
  responses:
    Error:
      description: 오류 응답
      content:
        application/json:
          schema:
            oneOf:
              - allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      status:
                        enum: [error]
                      error:
                        allOf:
                          - $ref: '#/components/schemas/ErrorDetail'
              - $ref: '#/components/schemas/PlainError'
  schemas:
    StandardResponse:
      type: object
      required: [status, timestamp]
      properties:
        status:
          type: string
          enum: [success, error]
        timestamp:
          type: string
          format: date-time
        error:
          type: object
          nullable: true
          allOf:
            - $ref: '#/components/schemas/ErrorDetail'
      description: 실제 백엔드에서 사용하는 표준 응답 래퍼
    ErrorDetail:
      type: object
      required: [type, message]
      properties:
        type:
          type: string
          enum: [NETWORK_ERROR, NOT_FOUND, UNAUTHORIZED, VALIDATION_ERROR, SERVER_ERROR]
        message:
          type: string
    PlainError:
      type: object
      properties:
        error:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/ErrorDetail'
    GeoPoint:
      type: object
      required: [lat, lng]
      properties:
        lat:
          type: number
          format: double
        lng:
          type: number
          format: double
    InsuranceHistoryEntry:
      type: object
      properties:
        type:
          type: string
          enum: ["등록", "갱신"]
        date:
          type: string
          format: date
        company:
          type: string
        product:
          type: string
        startDate:
          type: string
          format: date
        expiryDate:
          type: string
          format: date
        specialTerms:
          type: string
        docName:
          type: string
        docDataUrl:
          type: string
      description: 보험 이력 항목
    DeviceHistoryEntry:
      type: object
      properties:
        type:
          type: string
          enum: [install, replace, update]
        date:
          type: string
          format: date
        installDate:
          type: string
          format: date
        serial:
          type: string
        installer:
          type: string
    Asset:
      type: object
      required:
        - id
        - vin
        - plate
      properties:
        id:
          type: string
          description: 자산 고유 ID
        vin:
          type: string
          minLength: 17
          maxLength: 17
          description: 차량 VIN(17자리)
        plate:
          type: string
          description: 차량 번호판
        make:
          type: string
          nullable: true
          description: 제조사
        model:
          type: string
          nullable: true
          description: 모델명
        vehicleType:
          type: string
          nullable: true
          description: UI에 표시되는 차종(제조사/모델/연식 조합)
        year:
          type: integer
          nullable: true
          description: 제조 연도
        fuelType:
          type: string
          nullable: true
          description: 연료 종류
        color:
          type: string
          nullable: true
          description: 외관 색상
        vehicleValue:
          type: number
          format: double
          nullable: true
          description: 차량가액(원)
        purchaseDate:
          type: string
          format: date
          nullable: true
          description: 차량 구매일
        systemRegDate:
          type: string
          format: date
          nullable: true
          description: 전산 등록 일자
        systemDelDate:
          type: string
          format: date
          nullable: true
          description: 전산 삭제 일자
        registrationDate:
          type: string
          format: date
          nullable: true
          description: 등록 일자
        registrationStatus:
          type: string
          nullable: true
          description: 등록/장비 상태
        vehicleStatus:
          type: string
          nullable: true
          description: 원본 데이터상의 차량 상태
        managementStage:
          type: string
          nullable: true
          description: 차량 관리 단계(프론트에서 상태 필터로 사용)
          enum: ["대여중", "대여가능", "예약중", "입고 대상", "수리/점검 중", "수리/점검 완료"]
        diagnosticStatus:
          type: string
          nullable: true
          enum: ["-", "정상", "관심필요", "심각"]
          description: 진단 배지 상태
        diagnosticCodes:
          type: array
          nullable: true
          description: 차량 진단 코드 목록
          items:
            $ref: '#/components/schemas/DiagnosticEntry'
        deviceSerial:
          type: string
          nullable: true
          description: 장비 시리얼 번호
        deviceInstallDate:
          type: string
          format: date
          nullable: true
          description: 장비 설치 일자
        installer:
          type: string
          nullable: true
          description: 장비 설치 담당자
        deviceHistory:
          type: array
          items:
            $ref: '#/components/schemas/DeviceHistoryEntry'
          description: 장비 설치/교체 이력
        insuranceInfo:
          type: string
          nullable: true
          description: 보험 정보 요약(회사 + 상품)
        insuranceCompany:
          type: string
          nullable: true
        insuranceProduct:
          type: string
          nullable: true
        insuranceStartDate:
          type: string
          format: date
          nullable: true
        insuranceExpiryDate:
          type: string
          format: date
          nullable: true
        insuranceSpecialTerms:
          type: string
          nullable: true
        insuranceDocName:
          type: string
          nullable: true
        insuranceDocDataUrl:
          type: string
          nullable: true
          description: 보험 증빙 파일(Data URL 등)
        insuranceHistory:
          type: array
          items:
            $ref: '#/components/schemas/InsuranceHistoryEntry'
        memo:
          type: string
          nullable: true
        rental:
          description: 현재 연결된 렌탈 정보(배열이거나 단일 객체)
          oneOf:
            - $ref: '#/components/schemas/Rental'
            - type: array
              items:
                $ref: '#/components/schemas/Rental'
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
    AssetCreateInput:
      type: object
      required: [vin, plate, make, model]
      properties:
        vin:
          type: string
          minLength: 17
          maxLength: 17
        plate:
          type: string
        make:
          type: string
        model:
          type: string
        vehicleType:
          type: string
        year:
          type: integer
        fuelType:
          type: string
        color:
          type: string
        vehicleValue:
          type: number
          format: double
        purchaseDate:
          type: string
          format: date
        systemRegDate:
          type: string
          format: date
        systemDelDate:
          type: string
          format: date
        registrationStatus:
          type: string
        registrationDate:
          type: string
          format: date
        vehicleStatus:
          type: string
        managementStage:
          type: string
          enum: ["대여중", "대여가능", "예약중", "입고 대상", "수리/점검 중", "수리/점검 완료"]
        diagnosticStatus:
          type: string
          enum: ["-", "정상", "관심필요", "심각"]
        diagnosticCodes:
          type: array
          items:
            $ref: '#/components/schemas/DiagnosticEntry'
        deviceSerial:
          type: string
        deviceInstallDate:
          type: string
          format: date
        installer:
          type: string
        deviceHistory:
          type: array
          items:
            $ref: '#/components/schemas/DeviceHistoryEntry'
        insuranceInfo:
          type: string
        insuranceCompany:
          type: string
        insuranceProduct:
          type: string
        insuranceStartDate:
          type: string
          format: date
        insuranceExpiryDate:
          type: string
          format: date
        insuranceSpecialTerms:
          type: string
        insuranceDocName:
          type: string
        insuranceDocDataUrl:
          type: string
        insuranceHistory:
          type: array
          items:
            $ref: '#/components/schemas/InsuranceHistoryEntry'
        memo:
          type: string
    AssetUpdateInput:
      type: object
      description: 자산 업데이트 시 전달 가능한 필드 (부분 업데이트 허용)
      properties:
        plate:
          type: string
        make:
          type: string
        model:
          type: string
        vehicleType:
          type: string
        year:
          type: integer
        fuelType:
          type: string
        color:
          type: string
        vehicleValue:
          type: number
          format: double
        purchaseDate:
          type: string
          format: date
        systemRegDate:
          type: string
          format: date
        systemDelDate:
          type: string
          format: date
        registrationStatus:
          type: string
        registrationDate:
          type: string
          format: date
        vehicleStatus:
          type: string
        managementStage:
          type: string
          enum: ["대여중", "대여가능", "예약중", "입고 대상", "수리/점검 중", "수리/점검 완료"]
        diagnosticStatus:
          type: string
          enum: ["-", "정상", "관심필요", "심각"]
        diagnosticCodes:
          type: array
          items:
            $ref: '#/components/schemas/DiagnosticEntry'
        deviceSerial:
          type: string
        deviceInstallDate:
          type: string
          format: date
        installer:
          type: string
        deviceHistory:
          type: array
          items:
            $ref: '#/components/schemas/DeviceHistoryEntry'
        insuranceInfo:
          type: string
        insuranceCompany:
          type: string
        insuranceProduct:
          type: string
        insuranceStartDate:
          type: string
          format: date
        insuranceExpiryDate:
          type: string
          format: date
        insuranceSpecialTerms:
          type: string
        insuranceDocName:
          type: string
        insuranceDocDataUrl:
          type: string
        insuranceHistory:
          type: array
          items:
            $ref: '#/components/schemas/InsuranceHistoryEntry'
        memo:
          type: string
    DiagnosticEntry:
      type: object
      description: 차량 진단 코드 항목
      properties:
        code:
          type: string
          description: 진단 코드
        description:
          type: string
          description: 코드 설명
        severity:
          type: number
          format: float
          description: 심각도(0.0~10.0, 소수점 첫째자리)
          minimum: 0
          maximum: 10
          multipleOf: 0.1
        detectedDate:
          type: string
          format: date
          description: 최초 발견일
    RentalCustomer:
      type: object
      required: [name, phone, address, licenseNumber]
      properties:
        name:
          type: string
        phone:
          type: string
        address:
          type: string
        licenseNumber:
          type: string
    RentalPeriod:
      type: object
      required: [start, end]
      properties:
        start:
          type: string
          pattern: '^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:Z|[+-]\\d{2}:\\d{2})?$'
          description: ISO 8601 형식(타임존 표기는 선택 사항)
          example: 2025-09-10T09:00:00
        end:
          type: string
          pattern: '^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:Z|[+-]\\d{2}:\\d{2})?$'
          description: ISO 8601 형식(타임존 표기는 선택 사항)
          example: 2025-10-10T18:00:00
    AccidentReport:
      type: object
      description: 사고 접수 정보 (있을 경우)
      properties:
        accidentDate:
          type: string
          format: date
        accidentHour:
          type: string
        accidentMinute:
          type: string
        accidentSecond:
          type: string
        handlerName:
          type: string
        accidentDateTime:
          type: string
          pattern: '^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:Z|[+-]\\d{2}:\\d{2})?$'
          description: ISO 8601 형식(타임존 표기는 선택 사항)
        accidentDisplayTime:
          type: string
        blackboxFile:
          type: string
          nullable: true
        blackboxFileName:
          type: string
          nullable: true
        recordedAt:
          type: string
          format: date-time
    Rental:
      type: object
      required:
        - rental_id
        - vin
        - rental_period
      properties:
        rental_id:
          oneOf:
            - type: string
            - type: integer
              format: int64
          description: 렌탈 계약 고유 ID
        vin:
          type: string
          minLength: 17
          maxLength: 17
          description: 차량 VIN
        vehicleType:
          type: string
          nullable: true
        plate:
          type: string
          nullable: true
        renter_name:
          type: string
          nullable: true
        contact_number:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        customer:
          $ref: '#/components/schemas/RentalCustomer'
          nullable: true
          description: 실서비스에서 사용할 수 있는 구조화된 고객 정보
        rental_period:
          $ref: '#/components/schemas/RentalPeriod'
        insurance_name:
          type: string
          nullable: true
        rental_amount:
          type: number
          format: double
          nullable: true
        contract_status:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        reported_stolen:
          type: boolean
          nullable: true
        return_confirmed:
          type: boolean
          nullable: true
        accident_reported:
          type: boolean
          nullable: true
        accidentReport:
          $ref: '#/components/schemas/AccidentReport'
          nullable: true
        rental_location:
          $ref: '#/components/schemas/GeoPoint'
          nullable: true
        return_location:
          $ref: '#/components/schemas/GeoPoint'
          nullable: true
        current_location:
          $ref: '#/components/schemas/GeoPoint'
          nullable: true
        engine_status:
          type: string
          nullable: true
          enum: [on, off]
        restart_blocked:
          type: boolean
          nullable: true
        memo:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
    RentalCreateInput:
      type: object
      required: [vin, rental_period]
      properties:
        rental_id:
          oneOf:
            - type: string
            - type: integer
              format: int64
        vin:
          type: string
          minLength: 17
          maxLength: 17
        vehicleType:
          type: string
        plate:
          type: string
        renter_name:
          type: string
        contact_number:
          type: string
        address:
          type: string
        customer:
          $ref: '#/components/schemas/RentalCustomer'
        rental_period:
          $ref: '#/components/schemas/RentalPeriod'
        insurance_name:
          type: string
        rental_amount:
          type: number
          format: double
        contract_status:
          type: string
        status:
          type: string
        reported_stolen:
          type: boolean
        return_confirmed:
          type: boolean
        accident_reported:
          type: boolean
        accidentReport:
          $ref: '#/components/schemas/AccidentReport'
        rental_location:
          $ref: '#/components/schemas/GeoPoint'
        return_location:
          $ref: '#/components/schemas/GeoPoint'
        current_location:
          $ref: '#/components/schemas/GeoPoint'
        engine_status:
          type: string
          enum: [on, off]
        restart_blocked:
          type: boolean
        memo:
          type: string
        contract_file:
          type: string
          format: byte
          description: 계약서 파일(Base64 등 인코딩된 문자열)
        driver_license_file:
          type: string
          format: byte
          description: 운전면허 사본(Base64 등 인코딩된 문자열)
    RentalUpdateInput:
      type: object
      properties:
        renter_name:
          type: string
        contact_number:
          type: string
        address:
          type: string
        customer:
          $ref: '#/components/schemas/RentalCustomer'
        rental_period:
          $ref: '#/components/schemas/RentalPeriod'
        insurance_name:
          type: string
        rental_amount:
          type: number
          format: double
        contract_status:
          type: string
        status:
          type: string
        reported_stolen:
          type: boolean
        return_confirmed:
          type: boolean
        accident_reported:
          type: boolean
        accidentReport:
          $ref: '#/components/schemas/AccidentReport'
        rental_location:
          $ref: '#/components/schemas/GeoPoint'
        return_location:
          $ref: '#/components/schemas/GeoPoint'
        current_location:
          $ref: '#/components/schemas/GeoPoint'
        engine_status:
          type: string
          enum: [on, off]
        restart_blocked:
          type: boolean
        memo:
          type: string
        contract_file:
          type: string
          format: byte
        driver_license_file:
          type: string
          format: byte
    RentalStatusAggregate:
      type: object
      required: [current, stolen, active, overdue, reserved, conflicts, asOf]
      properties:
        current:
          type: object
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Rental'
        stolen:
          type: array
          items:
            $ref: '#/components/schemas/Rental'
        active:
          type: array
          items:
            $ref: '#/components/schemas/Rental'
        overdue:
          type: array
          items:
            $ref: '#/components/schemas/Rental'
        reserved:
          type: array
          items:
            $ref: '#/components/schemas/Rental'
        conflicts:
          type: array
          items:
            $ref: '#/components/schemas/Rental'
        asOf:
          type: string
          format: date-time
    VehicleSnapshot:
      type: object
      required: [vin, assetId, plate, asset, rentals, status]
      properties:
        vin:
          type: string
          minLength: 17
          maxLength: 17
        assetId:
          type: string
        plate:
          type: string
        asset:
          $ref: '#/components/schemas/Asset'
        rentals:
          type: array
          items:
            $ref: '#/components/schemas/Rental'
        status:
          $ref: '#/components/schemas/RentalStatusAggregate'
    ProblemVehicle:
      type: object
      required: [rental_id, vin, rental_period, issue]
      properties:
        rental_id:
          oneOf:
            - type: string
            - type: integer
              format: int64
        vin:
          type: string
          minLength: 17
          maxLength: 17
        plate:
          type: string
          nullable: true
        vehicleType:
          type: string
          nullable: true
        renter_name:
          type: string
          nullable: true
        contact_number:
          type: string
          nullable: true
        asset:
          $ref: '#/components/schemas/Asset'
          nullable: true
        issue:
          type: string
        rental_period:
          $ref: '#/components/schemas/RentalPeriod'
        reported_stolen:
          type: boolean
          nullable: true
        rental_location:
          $ref: '#/components/schemas/GeoPoint'
          nullable: true
        return_location:
          $ref: '#/components/schemas/GeoPoint'
          nullable: true
        current_location:
          $ref: '#/components/schemas/GeoPoint'
          nullable: true
        engine_status:
          type: string
          enum: [on, off]
          nullable: true
        restart_blocked:
          type: boolean
          nullable: true
        memo:
          type: string
          nullable: true
    DashboardSummary:
      type: object
      required:
        - totalAssets
        - availableAssets
        - activeRentals
        - problemVehicles
        - overdueRentals
        - stolenVehicles
        - deviceInstalled
        - insuranceRegistered
        - vehicleStatus
        - bizStatus
        - recentActivities
      properties:
        totalAssets:
          type: integer
        availableAssets:
          type: integer
        activeRentals:
          type: integer
        problemVehicles:
          type: integer
        overdueRentals:
          type: integer
        stolenVehicles:
          type: integer
        deviceInstalled:
          type: integer
        insuranceRegistered:
          type: integer
        vehicleStatus:
          type: array
          items:
            $ref: '#/components/schemas/NamedMetric'
        bizStatus:
          type: array
          items:
            $ref: '#/components/schemas/NamedMetric'
        recentActivities:
          type: array
          items:
            $ref: '#/components/schemas/RecentActivity'
    NamedMetric:
      type: object
      required: [name, value]
      properties:
        name:
          type: string
        value:
          type: integer
    RecentActivity:
      type: object
      required: [id, type, message, timestamp]
      properties:
        id:
          type: integer
        type:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time
    Geofence:
      type: object
      required: [name, points]
      properties:
        id:
          type: string
          description: 지오펜스 고유 ID
        name:
          type: string
        points:
          type: array
          items:
            $ref: '#/components/schemas/GeoPoint'
    Company:
      type: object
      required: [corpName, ceoName, regNumber, incorpDate, address]
      properties:
        corpName:
          type: string
        ceoName:
          type: string
        regNumber:
          type: string
        incorpDate:
          type: string
        address:
          type: string
        contactNumber:
          type: string
          nullable: true
        contactEmail:
          type: string
          format: email
          nullable: true
        logoDataUrl:
          type: string
          nullable: true
        certDataUrl:
          type: string
          nullable: true
        geofences:
          type: array
          items:
            $ref: '#/components/schemas/Geofence'
        geofencesUpdatedAt:
          type: string
          format: date-time
          nullable: true
    IssueCreateInput:
      type: object
      required: [vin, type, severity, description]
      properties:
        vin:
          type: string
          minLength: 17
          maxLength: 17
        type:
          type: string
          enum: [overdue, stolen, damage, other]
        severity:
          type: string
          enum: [low, medium, high]
        priority:
          type: string
          description: 선택적으로 우선순위를 별도로 기록할 수 있습니다.
        description:
          type: string
        reportedBy:
          type: string
    Issue:
      type: object
      required: [id, vin, type, severity, description, createdAt]
      properties:
        id:
          oneOf:
            - type: string
            - type: integer
              format: int64
        vin:
          type: string
        type:
          type: string
        severity:
          type: string
        priority:
          type: string
          nullable: true
        description:
          type: string
        reportedBy:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        status:
          type: string
          nullable: true

    User:
      type: object
      required: [userId, name, email, companyId, role, membershipStatus]
      properties:
        userId:
          type: string
          format: email
          description: 사용자 ID (이메일)
        name:
          type: string
          description: 사용자 이름
        email:
          type: string
          format: email
          description: 이메일
        phone:
          type: string
          nullable: true
          description: 전화번호
        position:
          type: string
          nullable: true
          description: 직책
        companyId:
          type: string
          description: 소속 회사 ID
        company:
          type: string
          nullable: true
          description: 회사명
        role:
          type: string
          enum: [super_admin, admin, member]
          description: 사용자 역할
        membershipStatus:
          type: string
          enum: [pending, approved, rejected]
          description: 가입 승인 상태
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true

    UserRegistrationInput:
      type: object
      required: [userId, password, name, companyId]
      properties:
        userId:
          type: string
          format: email
          description: 사용자 ID (이메일)
        password:
          type: string
          format: password
          description: 비밀번호
        name:
          type: string
          description: 사용자 이름
        email:
          type: string
          format: email
          description: 이메일 (userId와 동일할 수 있음)
        phone:
          type: string
          description: 전화번호
        position:
          type: string
          description: 직책
        companyId:
          type: string
          description: 소속 회사 ID

    UserRegistrationResponse:
      type: object
      required: [userId, name, createdAt]
      properties:
        userId:
          type: string
          format: email
        name:
          type: string
        email:
          type: string
          format: email
          nullable: true
        createdAt:
          type: string
          format: date-time

    LoginInput:
      type: object
      required: [userId, password]
      properties:
        userId:
          type: string
          format: email
        password:
          type: string
          format: password

    LoginResponse:
      type: object
      required: [token, data]
      properties:
        token:
          type: string
          description: JWT 토큰
        data:
          $ref: '#/components/schemas/User'

    MemberActionInput:
      type: object
      required: [userId]
      properties:
        userId:
          type: string
          format: email
          description: 대상 사용자 ID

    MemberRejectInput:
      type: object
      required: [userId]
      properties:
        userId:
          type: string
          format: email
          description: 대상 사용자 ID
        reason:
          type: string
          nullable: true
          description: 거절 사유 (선택)

    RoleChangeInput:
      type: object
      required: [role]
      properties:
        role:
          type: string
          enum: [admin, member, super_admin]
          description: 변경할 역할

    ErrorResponse:
      type: object
      required: [status, error]
      properties:
        status:
          type: string
          enum: [error]
        error:
          type: object
          required: [type, message]
          properties:
            type:
              type: string
              enum: [VALIDATION_ERROR, UNAUTHORIZED, FORBIDDEN, NOT_FOUND, SERVER_ERROR, APPROVAL_PENDING, APPROVAL_REJECTED]
            message:
              type: string
        timestamp:
          type: string
          format: date-time
          nullable: true
